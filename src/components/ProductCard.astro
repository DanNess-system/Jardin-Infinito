---
export interface Props {
  titulo: string;
  descripcion: string;
  imagen: string;
  imagenesAdicionales?: Array<{url: string, alt: string, title: string}>;
  precioOriginal: number;
  precioDescuento: number;
  stock?: number;
  categoria?: string;
}

const { 
  titulo, 
  descripcion, 
  imagen, 
  imagenesAdicionales = [], 
  precioOriginal, 
  precioDescuento,
  stock = 0,
  categoria = ''
} = Astro.props;

// Calcular el porcentaje de descuento
const descuentoPorcentaje = Math.round(((precioOriginal - precioDescuento) / precioOriginal) * 100);

// Crear array de todas las imágenes (principal + adicionales)
const todasLasImagenes = [
  { url: imagen, alt: titulo, title: titulo },
  ...imagenesAdicionales
];
---

<div class="group relative bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden border border-gray-100">
    <!-- Badge de descuento -->
    <div class="absolute top-4 right-4 z-10">
        <span class="bg-gradient-to-r from-red-500 to-red-600 text-white text-sm font-semibold px-3 py-1 rounded-full shadow-lg animate-pulse">
            -{descuentoPorcentaje}%
        </span>
    </div>
    
    <!-- Contenedor de imagen con galería y efectos -->
    <div class="relative overflow-hidden bg-[#f0f0f0]">
        {todasLasImagenes.length > 1 ? (
            <!-- Galería de imágenes con slider -->
            <div class="image-gallery relative">
                <div class="image-container">
                    {todasLasImagenes.map((img, index) => (
                        <img 
                            src={img.url} 
                            alt={img.alt || titulo} 
                            class={`gallery-image w-full h-64 object-contain object-center rounded-xl transition-all duration-700 group-hover:scale-110 ${index === 0 ? 'active' : ''}`}
                            data-index={index}
                        />
                    ))}
                </div>
                
                {/* Indicadores de imagen */}
                {todasLasImagenes.length > 1 && (
                    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
                        {todasLasImagenes.map((_, index) => (
                            <button 
                                class={`image-indicator w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-white shadow-lg' : 'bg-white/50'}`}
                                data-index={index}
                            />
                        ))}
                    </div>
                )}
                
                {/* Navegación */}
                {todasLasImagenes.length > 1 && (
                    <>
                        <button class="gallery-nav prev absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                            </svg>
                        </button>
                        <button class="gallery-nav next absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </>
                )}
            </div>
        ) : (
            <!-- Imagen única -->
            <img 
                src={imagen} 
                alt={titulo} 
                class="w-full h-64 object-contain object-center rounded-xl transition-transform duration-700 group-hover:scale-110"
            />
        )}
        <!-- Overlay verde sutil que aparece en hover -->
        <div class="absolute inset-0 bg-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl"></div>
        
        {/* Badge de stock */}
        {stock !== undefined && (
            <div class="absolute top-4 left-4 z-10">
                <span class={`text-xs font-medium px-2 py-1 rounded-full ${
                    stock > 0 
                        ? 'bg-green-100 text-green-800 border border-green-200' 
                        : 'bg-red-100 text-red-800 border border-red-200'
                }`}>
                    {stock > 0 ? `Stock: ${stock}` : 'Agotado'}
                </span>
            </div>
        )}
    </div>
    
    <!-- Contenido de la card -->
    <div class="p-6 space-y-4">
        <!-- Título con línea decorativa -->
        <div class="space-y-2">
            <h3 class="text-2xl font-bold bg-gradient-to-br from-green-900 to-blue-50 bg-clip-text text-transparent group-hover:from-primary group-hover:to-secondary transition-all duration-300">
                {titulo}
            </h3>
            <div class="w-12 h-1 bg-gradient-to-r from-primary to-secondary rounded-full transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500"></div>
        </div>
        
        <!-- Descripción -->
        <p class="text-gray-600 text-sm leading-relaxed line-clamp-3">
            {descripcion}
        </p>
        
        <!-- Contenedor de precios con mejor diseño -->
        <div class="pt-4 border-t border-gray-100">
            <div class="flex items-center justify-between">
                <div class="space-y-1">
                    <div class="flex items-baseline gap-3">
                        <span class="text-3xl font-bold text-primary">
                            ${precioDescuento.toLocaleString('es-MX')}
                        </span>
                        <span class="text-lg text-gray-400 line-through font-medium">
                            ${precioOriginal.toLocaleString('es-MX')}
                        </span>
                    </div>
                    <p class="text-xs text-gray-500 font-medium">Precio en pesos mexicanos</p>
                </div>
            </div>
        </div>
        
        <!-- Botón de acción -->
        <!-- <button class="w-full bg-gradient-to-r from-primary to-secondary text-white font-semibold py-3 px-6 rounded-xl hover:from-secondary hover:to-primary transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl focus:outline-none focus:ring-4 focus:ring-primary/30">
            <span class="flex items-center justify-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m4.5-5a1 1 0 100 2 1 1 0 000-2zm6 0a1 1 0 100 2 1 1 0 000-2z"/>
                </svg>
                Agregar al Carrito
            </span>
        </button> -->
    </div>
    
    <!-- Elemento decorativo (hojas) -->
    <div class="absolute -bottom-2 -right-2 opacity-5 group-hover:opacity-10 transition-opacity duration-500">
        <svg class="w-20 h-20 text-primary" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
    </div>
</div>

<style>
    .image-gallery .gallery-image {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .image-gallery .gallery-image.active {
        display: block;
        position: relative;
    }
    
    .image-gallery .image-container {
        position: relative;
        height: 16rem; /* h-64 equivalent */
    }
    
    .image-indicator.active {
        background-color: white !important;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    // Funcionalidad de galería de imágenes
    document.addEventListener('DOMContentLoaded', function() {
        const galleries = document.querySelectorAll('.image-gallery');
        
        galleries.forEach(gallery => {
            const images = gallery.querySelectorAll('.gallery-image');
            const indicators = gallery.querySelectorAll('.image-indicator');
            const prevBtn = gallery.querySelector('.gallery-nav.prev');
            const nextBtn = gallery.querySelector('.gallery-nav.next');
            let currentIndex = 0;
            
            // Función para mostrar imagen
            function showImage(index: number) {
                // Ocultar todas las imágenes
                images.forEach(img => img.classList.remove('active'));
                indicators.forEach(indicator => indicator.classList.remove('active'));
                
                // Mostrar imagen actual
                if (images[index]) {
                    images[index].classList.add('active');
                }
                if (indicators[index]) {
                    indicators[index].classList.add('active');
                }
                
                currentIndex = index;
            }
            
            // Event listeners para indicadores
            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    showImage(index);
                });
            });
            
            // Event listeners para navegación
            if (prevBtn) {
                prevBtn.addEventListener('click', () => {
                    const newIndex = currentIndex > 0 ? currentIndex - 1 : images.length - 1;
                    showImage(newIndex);
                });
            }
            
            if (nextBtn) {
                nextBtn.addEventListener('click', () => {
                    const newIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;
                    showImage(newIndex);
                });
            }
            
            // Auto-advance (opcional)
            setInterval(() => {
                if (images.length > 1) {
                    const newIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;
                    showImage(newIndex);
                }
            }, 5000); // Cambiar cada 5 segundos
        });
    });
</script>
